<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C与C++各输入函数用法：cin, cin.getlin(), getlin(), gets(), fgets(), gets_s()</title>
      <link href="/2024/09/01/post2/"/>
      <url>/2024/09/01/post2/</url>
      
        <content type="html"><![CDATA[<h1 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h1><blockquote><p>1、cin用法<br>2、cin.getline()用法<br>3、getline()用法<br>4、C语言动态数组输入字符串<br>5、C语言输入函数gets(), fgets(), gets_s()</p></blockquote><h1 id="1、cin"><a href="#1、cin" class="headerlink" title="1、cin>>"></a>1、cin&gt;&gt;</h1><blockquote><p>cin用于输入一个字符、数字或字符串，遇到“空格”，“TAB”，回车键即结束输入</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    int a, b;    string s;    cin &gt;&gt; a &gt;&gt; b;    cin &gt;&gt; s;    cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; s &lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>输入:</strong> 1 2 skiu32<br><strong>输出:</strong> 1 2 skiu32</p></blockquote><h1 id="2、cin-getline"><a href="#2、cin-getline" class="headerlink" title="2、cin.getline()"></a>2、cin.getline()</h1><blockquote><p>cin.getline() 可以接收一个字符串，相较于cin，可以输入空格并输出</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string s;    cin.getline(s, 8);    cout &lt;&lt; s &lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>输入:</strong> tokyoguy<br><strong>输出:</strong> tokyogu<br><strong>原因:</strong> cin.getline()接收8个字符到字符串s中，最后一个为”\0”, 因此只有7个字符的输出：tokyogu</p></blockquote><blockquote><p><strong>拓展:</strong><br>cin.getline()实际上有三个参数，cin.getline(接收字符串变量, 接收字符长度, 结束字符); 当第三个参数省略时，函数默认为”\0”；如果在上述代码中将cin.getline(s, 8)改为cin.getline(s, 8, y)，输出为”tok”</p></blockquote><h1 id="3、getline"><a href="#3、getline" class="headerlink" title="3、getline()"></a>3、getline()</h1><blockquote><p>getline()与cin.getlin()并不相同，cin.getline()属于iostream流，函数库为iostream；getline()属于string流，函数库为string。<br>但在用法上，getline()和cin.getline()并没有什么区别，都可以输入空格并输出</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string s;    getline(cin, s);    cout &lt;&lt; s &lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>输入:</strong> tokyoguy<br><strong>输出:</strong> tokyoguy</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>当同时使用cin和getline()时，在cin&gt;&gt;输入流完成之后，在getline()之前，需要输入回车符来消除cin流的缓存，否则在控制台就不会出现getline()的输入提示</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main(){    string s;    int n;    cin &gt;&gt; n;    s = "\0";    getline(cin, s);  // 输入回车符消除cin流缓存    getline(cin, s);    cout &lt;&lt; n;    cout &lt;&lt; s &lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>输入输出:</strong><br><img src="/images/2-1.png"><br><strong>未消除cin流缓存结果:</strong><br><img src="/images/2-2.png"></p></blockquote><h1 id="4、C语言动态数组输入字符串"><a href="#4、C语言动态数组输入字符串" class="headerlink" title="4、C语言动态数组输入字符串"></a>4、C语言动态数组输入字符串</h1><blockquote><p>在C语言中，由于C语言并没有string类型和vector等容器，C语言无法像C++那样，可以轻易定义未知长度的数组或字符串。在leetcode或PAT等编程网站上，有很多题目都是要求先输入一个整数来表示字符串的长度，再输入字符串；对于这个问题，初学者一般都是直接定义一个长数组(a[1000])，以完整包含输入的字符串。但这样做有一个很大的问题：数组定义过大，会浪费内存；数组定义过小，数组又会越界。这个时候可以采用malloc或者calloc来定义一个动态数组</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input a number:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//char *s = (char)calloc(n * sizeof(char), 0); // 相较于malloc，calloc多了一个功能，初始化数组元素，将数组元素初始化为0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    delete s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>输入:</strong><br>8<br>tokyoguy<br><strong>输出:</strong> tokyoguy</p></blockquote><blockquote><p>定义动态数组需要注意，在程序最后释放空间，同时删除指针，防止其成为野指针。</p></blockquote><h1 id="动态数组举例"><a href="#动态数组举例" class="headerlink" title="动态数组举例"></a>动态数组举例</h1><blockquote><p><strong>PAT 1005题：继续(3n+1)猜想</strong><br><strong>描述：</strong> 卡拉兹(Callatz)猜想：对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。<br><strong>输入格式：</strong> 每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。<br><strong>输出格式：</strong> 每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。<br><strong>输入样例：</strong><br>6<br>3 5 6 7 8 11<br><strong>输出样例：</strong> 7 6</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> exist<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    bool choose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    v <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input failed!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token operator">*</span>number1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>number2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>number1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> number2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"memory allocation failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                choose <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>choose<span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span>number2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>number1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                exist <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">)</span><span class="token punctuation">{</span>            key<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> number1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        exist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> key<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> key<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                key<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                key<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">free</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>    delete number1<span class="token punctuation">;</span>    delete number2<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、C语言输入函数gets-fgets-gets-s"><a href="#5、C语言输入函数gets-fgets-gets-s" class="headerlink" title="5、C语言输入函数gets(), fgets(), gets_s()"></a>5、C语言输入函数gets(), fgets(), gets_s()</h1><h2 id="1-gets-函数"><a href="#1-gets-函数" class="headerlink" title="(1) gets()函数"></a>(1) gets()函数</h2><blockquote><p><strong>解释：</strong> gets()函数会读取整行输入行，直至遇到换行符，然后丢弃换行符，储存其余字符，并在字符末尾添加一个空字符使其成为C字符串。常和puts()函数配对使用。<br><strong>返回值：</strong> 成功读取输入会返回储存输入内容的地址，发生错误或未读取任何非’\n’字符则返回NULL（空指针）。<br><strong>缺陷：</strong> 当gets()函数的参数是有限大小的字符数组时，其唯一的参数是该字符数组首元素的地址(即指向该字符串首元素的指针)，它无法检查数组的空间是否足够储存所有输入行。如果输入的字符串过长，会导致缓冲区溢出，多余的字符会超出指定的目标空间。如果超出的字符仅占用了尚未使用的内存，就不会立即出现问题；如果它们修改了程序中的其他数据，会导致程序异常或中止，或其他情况。因此，gets()函数在编译器中常常会被给出警告，同时推荐使用fgets()函数</p></blockquote><h2 id="2-fgets-函数"><a href="#2-fgets-函数" class="headerlink" title="(2) fgets()函数"></a>(2) fgets()函数</h2><blockquote><p><strong>解释：</strong> fgets()函数会读取整行输入行，直至遇到换行符，但与gets函数不同的是gets()函数会丢弃换行符替换为空字符，而fgets()函数会储存在字符串中，同时，fgets()函数通过第2个参数限制读入的字符数来解决gets()函数的溢出问题。第二个参数指定了读取字符的数量，如果该参数是n，则读取 n-1 个字符，或读取到第一个换行符为止。超出的字符则保留在缓冲区中。（可选择性利用fgets()循环清空缓冲区中的字符，避免影响下次输入）<br><strong>返回值：</strong> 成功读取输入会返回与参数 str相同的地址，发生错误、读取到文件尾或未读取到任何非 ‘\n’字符则返回NULL（空指针）。<br><strong>参数：</strong><br>  str — 指向储存输入内容地址的指针。<br>  n — 要读取的最大字符数量（包括字符串末尾的空字符）。<br>  stream — 指向FILE对象的指针，指明要读入的文件。如果从键盘中读入输入的数据，则以stdin作为参数，该标准输入标识符定义在&lt;stdio.h&gt;中。</p></blockquote><h2 id="3-gets-s-函数"><a href="#3-gets-s-函数" class="headerlink" title="(3) gets_s()函数"></a>(3) gets_s()函数</h2><blockquote><p><strong>解释：</strong> get_s()函数由C11标准新增，它与gets()函数一样，读取到换行符会丢弃换行符，替换成空字符；<br>          同时，get_s()函数会使用一个参数来显示读入的字符数，与fgets()函数不同的是，fgets()限制的是函数读取的字符数量，而gets_s()限制的是缓存区大小；<br>          与fgets()相比 gets_s()只从标准输入（stdin）中读取数据，所以不需要第三个参数。<br><strong>返回值：</strong> 读取成功会返回与参数 str相同的地址，发生错误或未读取到任何非 ‘\n’字符则返回NULL（空指针）。<br><strong>参数：</strong><br>  str — 指向储存输入内容地址的指针。<br>  n — 缓冲区大小。</p></blockquote><h1 id="fgets-函数示例"><a href="#fgets-函数示例" class="headerlink" title="fgets()函数示例"></a>fgets()函数示例</h1><blockquote><p><strong>PAT 1010题：一元多项式求导</strong><br><strong>输入格式：</strong> 以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。<br><strong>输出格式：</strong> 以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。<br><strong>输入样例：</strong> 3 4 -5 2 6 1 -2 0<br><strong>输出样例：</strong> 12 3 -10 1 6 0</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>token<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ty<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fom<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// fgets()函数读取的是char型数据</span>    length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        str<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>        length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    token <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 通过空格分隔字符，第一个参数是要分割的字符串，第二个参数是分割字符串的分隔符。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>token <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                         ty<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 转换为int型数据</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        token <span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 第一个参数是NULL，表示继续处理上一个字符串</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ty<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    fom<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ty<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ty<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    fom<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ty<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> fom<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> fom<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 76 最小覆盖字串</title>
      <link href="/2024/08/22/post/"/>
      <url>/2024/08/22/post/</url>
      
        <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>*对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>*如果 s 中存在这样的子串，我们保证它是唯一的答案。</p></blockquote><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h1><blockquote><p><strong>输入:</strong> s = “ADOBECODEBANC”, t = “ABC”<br><strong>输出:</strong> “BANC”<br><strong>解释:</strong> 最小覆盖子串 “BANC” 包含来自字符串 t 的 ‘A’、’B’ 和 ‘C’。</p></blockquote><h1 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h1><blockquote><p><strong>输入:</strong> s = “a”, t = “a”<br><strong>输出:</strong> “a”<br><strong>解释:</strong> t 中两个字符 ‘a’ 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</p></blockquote><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><blockquote><p>s=’ADOBECODEBANC’, t=’ABC’</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>1.对于这种在两个数组中进行比较的题目，首先想到的是采用哈希表；题目又要求在第一个子串中重复寻找，因此可以使用双指针法（也可以称为滑动窗口）。首先使用一个哈希表 t_map 来保存字符串 t 中的元素</p></blockquote><style>    table {       width: auto;    max-width: 30em;    margin: auto;    text-align: center;  }  th, td {      text-align: center; /* 使表格内容居中 */    }</style><table>    <tbody><tr>        <th rowspan="1" colspan="2"> t </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>2.可以看到字符串 t 总共包含了字符 A，B，C，且它们出现的次数分别为 1，用 cnt 表示字符 A，B，C 出现的总和，其值为 3. 同样的，使用哈希表 s_map 来表示字符串 s 中，字符 A，B，C 出现的频率。</p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 0 </td>    </tr>    <tr>        <td> B </td>        <td> 0 </td>    </tr>    <tr>        <td> C </td>        <td> 0 </td>    </tr></tbody></table><blockquote><p>3.初始化字符串 s 的快、慢指针为 0，字串长度 length 为 INT32_MAX；定义一个变量 flag，表示字符 A，B，C 出现的总和（注意：flag 值的变化需与哈希表 t_map 中的值相比较）。然后快指针一步步往后遍历，当快指针指向的元素存在于字符串 t 中的字符时，哈希表 s_map 中相应的元素频率加 1，同时判断哈希表 t_map 和哈希表 s_map 其元素是否相等，如果相等，则 flag 加 1.<br><img src="/images/1.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 0 </td>    </tr>    <tr>        <td> C </td>        <td> 0 </td>    </tr></tbody></table><blockquote><p>4.此时，哈希表 s_map 与 t_map 中字符 A 出现的频率一致，flag 加 1.</p></blockquote><blockquote><p><img src="/images/2.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>5.当 flag 等于 cnt 时，记录此时字串的长度，其值为 fast - slow + 1，并使其与上一次的字串长度 length 比较，取较小值为 length；然后停止移动快指针，移动慢指针， 同时记录哈希表 s_map 中字符频率的变化：当慢指针指定的元素包含于字符串 t 中的元素时，哈希表元素频率减 1；如果哈希表 t_map 对应的元素频率大于哈希表 s_map 的元素频率时，flag 减 1.</p></blockquote><blockquote><p><img src="/images/3.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 0 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>6.移动慢指针后，再重新比较 flag 值是否与 cnt 值相等，如果相等，继续移动慢指针；否则回到原循环，移动快指针。</p></blockquote><blockquote><p><img src="/images/4.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 2 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>7.继续循环第 5 步，直到快慢指针均遍历完整个数组。</p></blockquote><h1 id="CPP-代码"><a href="#CPP-代码" class="headerlink" title="CPP 代码"></a>CPP 代码</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    string minWindow(string s, string t) {        if(s.length() == 0 || t.length() == 0)return "";        unordered_map&lt;char, int&gt; ct, cs;        for(auto c:t) ct[c]++;        int left=0, right=0, length=INT32_MAX, flag = 0, tCount = ct.size(), strStart;        while(right &lt; s.length()){            if(ct.count(s[right])){                cs[s[right]]++;                if(cs[s[right]] == ct[s[right]]){                    flag++;                }            }            while(flag == tCount){                if(right - left + 1 &lt; length){                    length = right - left + 1;                    strStart = left;                }                if(ct.count(s[left])){                    cs[s[left]]--;                    if(ct[s[left]] &gt; cs[s[left]]){                        flag--;                    }                }                left++;            }            right++;        }       if(length == INT32_MAX) return "";       return s.substr(strStart, length);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="/2024/08/17/hello-world/"/>
      <url>/2024/08/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
