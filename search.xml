<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode 76 最小覆盖字串</title>
      <link href="/2024/08/22/post/"/>
      <url>/2024/08/22/post/</url>
      
        <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><blockquote><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><blockquote><p>*对于 t 中重复字符，我们寻找的子字符串中该字符数量必须不少于 t 中该字符数量。<br>*如果 s 中存在这样的子串，我们保证它是唯一的答案。</p></blockquote><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h1><blockquote><p><strong>输入:</strong> s = “ADOBECODEBANC”, t = “ABC”<br><strong>输出:</strong> “BANC”<br><strong>解释:</strong> 最小覆盖子串 “BANC” 包含来自字符串 t 的 ‘A’、’B’ 和 ‘C’。</p></blockquote><h1 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h1><blockquote><p><strong>输入:</strong> s = “a”, t = “a”<br><strong>输出:</strong> “a”<br><strong>解释:</strong> t 中两个字符 ‘a’ 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</p></blockquote><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><blockquote><p>s=’ADOBECODEBANC’, t=’ABC’</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>1.对于这种在两个数组中进行比较的题目，首先想到的是采用哈希表；题目又要求在第一个子串中重复寻找，因此可以使用双指针法（也可以称为滑动窗口）。首先使用一个哈希表 t_map 来保存字符串 t 中的元素</p></blockquote><style>    table {       width: auto;    max-width: 30em;    margin: auto;    text-align: center;  }  th, td {      text-align: center; /* 使表格内容居中 */    }</style><table>    <tbody><tr>        <th rowspan="1" colspan="2"> t </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>2.可以看到字符串 t 总共包含了字符 A，B，C，且它们出现的次数分别为 1，用 cnt 表示字符 A，B，C 出现的总和，其值为 3. 同样的，使用哈希表 s_map 来表示字符串 s 中，字符 A，B，C 出现的频率。</p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 0 </td>    </tr>    <tr>        <td> B </td>        <td> 0 </td>    </tr>    <tr>        <td> C </td>        <td> 0 </td>    </tr></tbody></table><blockquote><p>3.初始化字符串 s 的快、慢指针为 0，字串长度 length 为 INT32_MAX；定义一个变量 flag，表示字符 A，B，C 出现的总和（注意：flag 值的变化需与哈希表 t_map 中的值相比较）。然后快指针一步步往后遍历，当快指针指向的元素存在于字符串 t 中的字符时，哈希表 s_map 中相应的元素频率加 1，同时判断哈希表 t_map 和哈希表 s_map 其元素是否相等，如果相等，则 flag 加 1.<br><img src="/images/1.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 0 </td>    </tr>    <tr>        <td> C </td>        <td> 0 </td>    </tr></tbody></table><blockquote><p>4.此时，哈希表 s_map 与 t_map 中字符 A 出现的频率一致，flag 加 1.</p></blockquote><blockquote><p><img src="/images/2.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>5.当 flag 等于 cnt 时，记录此时字串的长度，其值为 fast - slow + 1，并使其与上一次的字串长度 length 比较，取较小值为 length；然后停止移动快指针，移动慢指针， 同时记录哈希表 s_map 中字符频率的变化：当慢指针指定的元素包含于字符串 t 中的元素时，哈希表元素频率减 1；如果哈希表 t_map 对应的元素频率大于哈希表 s_map 的元素频率时，flag 减 1.</p></blockquote><blockquote><p><img src="/images/3.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 0 </td>    </tr>    <tr>        <td> B </td>        <td> 1 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>6.移动慢指针后，再重新比较 flag 值是否与 cnt 值相等，如果相等，继续移动慢指针；否则回到原循环，移动快指针。</p></blockquote><blockquote><p><img src="/images/4.png"></p></blockquote><table>    <tbody><tr>        <th rowspan="1" colspan="2"> s </th>    </tr>    <tr>        <td> char </td>        <td> count </td>    </tr>    <tr>        <td> A </td>        <td> 1 </td>    </tr>    <tr>        <td> B </td>        <td> 2 </td>    </tr>    <tr>        <td> C </td>        <td> 1 </td>    </tr></tbody></table><blockquote><p>7.继续循环第 5 步，直到快慢指针均遍历完整个数组。</p></blockquote><h1 id="CPP-代码"><a href="#CPP-代码" class="headerlink" title="CPP 代码"></a>CPP 代码</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    string minWindow(string s, string t) {        if(s.length() == 0 || t.length() == 0)return "";        unordered_map&lt;char, int&gt; ct, cs;        for(auto c:t) ct[c]++;        int left=0, right=0, length=INT32_MAX, flag = 0, tCount = ct.size(), strStart;        while(right &lt; s.length()){            if(ct.count(s[right])){                cs[s[right]]++;                if(cs[s[right]] == ct[s[right]]){                    flag++;                }            }            while(flag == tCount){                if(right - left + 1 &lt; length){                    length = right - left + 1;                    strStart = left;                }                if(ct.count(s[left])){                    cs[s[left]]--;                    if(ct[s[left]] &gt; cs[s[left]]){                        flag--;                    }                }                left++;            }            right++;        }       if(length == INT32_MAX) return "";       return s.substr(strStart, length);    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> programm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="/2024/08/17/hello-world/"/>
      <url>/2024/08/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
